services:
  backend:
    container_name: fastapi
    env_file:
      - ./.env
    build:
        context: .
        dockerfile: Dockerfile
    ports:
      - "8000:${BACKEND_PORT}"
    networks:
      - custom
    depends_on:
      - postgres
      - minio
    environment:
      POSTGRES_URI: $POSTGRES_URI
    command: "gunicorn -c conf/gunicorn.conf.py 'exam_tutor.run:make_app()'"

  postgres:
    container_name: postgres
    image: postgres:13.0-alpine
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASS}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_NAME}
    networks:
      - custom
    ports:
      - "2344:${POSTGRES_PORT}"

  minio:
    image: minio/minio:latest
    container_name: minio
    env_file:
      - ./.env
    ports:
      - "9000:${MINIO_PORT}" # API
      - "9001:${MINIO_PORT_CONSOLE}" # CONSOLE
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":${MINIO_PORT_CONSOLE}"
    networks:
      - custom
    volumes:
      - minio-data:/data

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    env_file:
      - ./.env
    ports:
      - "9090:${PROMETHEUS_PORT}"
    networks:
      - custom
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:${GRAFANA_PORT}"
    depends_on:
      - prometheus
    networks:
      - custom
    volumes:
      - grafana_data:/var/lib/grafana


networks:
  custom:
    driver: bridge

volumes:
  minio-data:
  grafana_data:
